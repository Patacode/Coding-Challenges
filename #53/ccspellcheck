#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift File.expand_path('lib', __dir__)

require 'optparse'
require 'benchmark'

require 'bloom_filter'

options = {}

OptionParser.accept(:text_file) do |filepath|
  err_msg = "- filepath #{filepath.inspect} must have a .txt extension"
  err_msg2 = "- filepath #{filepath.inspect} does not exist"
  raise OptionParser::InvalidArgument, err_msg unless filepath.end_with?('.txt')
  raise OptionParser::InvalidArgument, err_msg2 unless File.exist?(filepath)

  filepath
end

OptionParser.accept(:bf_file) do |filepath|
  err_msg = "- filepath #{filepath.inspect} must have a .bf extension"
  err_msg2 = "- filepath #{filepath.inspect} does not exist"
  raise OptionParser::InvalidArgument, err_msg unless filepath.end_with?('.bf')
  raise OptionParser::InvalidArgument, err_msg2 unless File.exist?(filepath)

  filepath
end

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: ccspellcheck [options]'

  opts.on('-h', '--help', 'prints this help') do
    puts opts
    exit
  end

  opts.on(
    '-b',
    '--build DICTIONARY_FILE',
    :text_file,
    'Build bloom filter'
  ) do |filepath|
    options[:dictionary] = filepath
  end

  opts.on(
    '-u',
    '--use BLOOM_FILTER_FILE',
    :bf_file,
    'Use the provided bloom filter'
  ) do |filepath|
    options[:bloom_filter] = filepath
  end
end

ARGV.empty? ? parser.parse('-h') : parser.parse!

dictionary = options[:dictionary]
bloom_filter = options[:bloom_filter]

unless bloom_filter.nil?
  bf = BloomFilter.new(bloom_filter)

  puts "Loaded from file #{bloom_filter.inspect}"
  puts "Version                       = #{bf.version}"
  puts "Number of bits used           = #{bf.size}"
  puts "Number of hash functions used = #{bf.hash_function_count}"

  exit
end

element_count = File.open(dictionary) do |file|
  file.each_line.count
end

bf = BloomFilter.new(element_count)

puts "Number of bits used           = #{bf.size}"
puts "Number of hash functions used = #{bf.hash_function_count}"

time = Benchmark.measure do
  chunk_size = 1024 * 1024 # 1 Mib
  last_line = ''
  File.open(dictionary) do |file|
    until file.eof?
      chunk = file.read(chunk_size)
      chunk_lines = chunk.split("\n")

      partial_line_detected = !chunk.end_with?("\n")

      bf << "#{last_line}#{chunk_lines[0]}"
      chunk_lines[1..-2].each { |line| bf << line }

      last_line = chunk_lines[-1]
      bf << last_line unless partial_line_detected
    end
  end

  bf.save_to_file('result')
end

puts "It took #{time.format('%t')} seconds to build the bloom filter"
